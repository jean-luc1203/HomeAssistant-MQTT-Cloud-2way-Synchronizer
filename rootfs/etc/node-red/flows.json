[
    {
        "id": "b1ca67b21089b915",
        "type": "tab",
        "label": "Initialisations MQTT-Cloud",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a1c7ea549b32dfc9",
        "type": "tab",
        "label": "MQTT-Cloud-out",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cae51940ae4cfae7",
        "type": "tab",
        "label": "MQTT-Cloud-In",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d9178a09ade71024",
        "type": "group",
        "z": "b1ca67b21089b915",
        "name": "Initialisation des variables",
        "style": {
            "stroke": "#000000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "c8e26f4ca5e76e36",
            "c1fd93cd8f38ea7c"
        ],
        "x": 28,
        "y": 73,
        "w": 864,
        "h": 394
    },
    {
        "id": "6c19eb9e84cdf38b",
        "type": "group",
        "z": "b1ca67b21089b915",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0ec51b6fd8d48038",
            "84db6ed2a0945bdd",
            "a0a0d9469406c5a8",
            "b38da9cc0fe45944",
            "18be8868fd9888b7",
            "567fe9a7f3910323",
            "32d98207bb37887d",
            "9d3d9cd9d0aaf884",
            "ea424593a0b6533a",
            "4a6179de378fa7c5",
            "6fa5d0c215b7e641",
            "8bcf0e0b17b0565f"
        ],
        "x": 34,
        "y": 979,
        "w": 492,
        "h": 282
    },
    {
        "id": "09c8d74836111377",
        "type": "group",
        "z": "b1ca67b21089b915",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2f1946e570f89af5",
            "4b621344460ef394"
        ],
        "x": 574,
        "y": 1089.199951171875,
        "w": 312,
        "h": 131.800048828125
    },
    {
        "id": "c2c511b3522ee8b0",
        "type": "group",
        "z": "a1c7ea549b32dfc9",
        "name": "Cloud MQTT définitions",
        "style": {
            "stroke": "#0070c0",
            "label": true,
            "color": "#000000",
            "fill": "none",
            "fill-opacity": "0.36"
        },
        "nodes": [
            "fc6a7dbdb2978cae",
            "f376639c469c1a76",
            "58623a0b92166652",
            "2d4c8697844d115a",
            "d2e51bdcb36885e6",
            "e3da12efa423b488",
            "8c259c144bc281fb",
            "f8c85e619c304aa7",
            "e9140fbdd804c122"
        ],
        "x": 14,
        "y": 99,
        "w": 852,
        "h": 162
    },
    {
        "id": "b3b9f5f06f6d39ed",
        "type": "group",
        "z": "a1c7ea549b32dfc9",
        "name": "Lire les entités définies par l'utilisateur",
        "style": {
            "label": true,
            "stroke": "#6f2fa0",
            "color": "#000000"
        },
        "nodes": [
            "1c0e7e37c721e7c4",
            "7fc8c29d22abed44",
            "e5c7a98373192fa3",
            "c9e8d64a7cea697b",
            "5cf675dc2470231c"
        ],
        "x": 14,
        "y": 299,
        "w": 1032,
        "h": 82
    },
    {
        "id": "6d8a2197f9b79fe1",
        "type": "group",
        "z": "a1c7ea549b32dfc9",
        "name": "traitement des entités à lire et envoyer vers le broker externe",
        "style": {
            "label": true,
            "stroke": "#6f2fa0",
            "color": "#000000"
        },
        "nodes": [
            "46a372a620414d76",
            "7300a1fc5fc21865",
            "ba41b00845d7113a",
            "10ed6574b57f545d",
            "d996108243619012",
            "24b002ddce3a8bf8",
            "9cb68cad2f001d89",
            "fae0cf06c8864182",
            "b372af83215826ef"
        ],
        "x": 14,
        "y": 419,
        "w": 1012,
        "h": 182
    },
    {
        "id": "4c6743f249067968",
        "type": "group",
        "z": "a1c7ea549b32dfc9",
        "name": "Pour debugger ",
        "style": {
            "stroke": "#777777",
            "label": true,
            "color": "#0070c0"
        },
        "nodes": [
            "aee2df6b02ea12cb",
            "a3206be9cb219e6f",
            "922be1c52ff787bb"
        ],
        "x": 54,
        "y": 639,
        "w": 352,
        "h": 122
    },
    {
        "id": "c1fd93cd8f38ea7c",
        "type": "group",
        "z": "b1ca67b21089b915",
        "g": "d9178a09ade71024",
        "name": "MQTT définitions",
        "style": {
            "stroke": "#ffC000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "0c319b0244658cad",
            "80a0031e2a8dbfbc",
            "355fec0a2e1aaf7a",
            "b82078ca27edc9db",
            "58adbc8abf20aab0",
            "4e25b5fa6500606e",
            "66ce0bd5261eb149",
            "63efeee1a97e3bb9",
            "323bc1fdf8eb4b0e",
            "468d5c1a95681d8d"
        ],
        "x": 54,
        "y": 259,
        "w": 772,
        "h": 182
    },
    {
        "id": "c8e26f4ca5e76e36",
        "type": "group",
        "z": "b1ca67b21089b915",
        "g": "d9178a09ade71024",
        "name": "Récupération des variables définies dans la configuration du module depuis l'onglet configuration de HAOS",
        "style": {
            "stroke": "#ffC000",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "12543920bca0a8e5",
            "5c144e0e135713c7",
            "9db46980e482d881",
            "2682276da62a0840",
            "b122ec506872171a",
            "416789eaf381cb09"
        ],
        "x": 54,
        "y": 99,
        "w": 812,
        "h": 122
    },
    {
        "id": "79bd9f312e074d8e",
        "type": "mqtt-broker",
        "name": "Cloud MQTT Broker",
        "broker": "Cloud-MQTT-Broker",
        "port": "8883",
        "tls": "",
        "clientid": "JK-BMS",
        "autoConnect": false,
        "usetls": true,
        "protocolVersion": "5",
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0f46412e148c8e44",
        "type": "mqtt-broker",
        "name": "HiveMQ Cloud",
        "broker": "797e7d5e36644ae8b5d8988b50b3b48f.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "nodered-cloud",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "94b7314a.817d4",
        "type": "mqtt-broker",
        "name": "Local MQTT",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "80a0031e2a8dbfbc",
        "type": "inject",
        "z": "b1ca67b21089b915",
        "g": "c1fd93cd8f38ea7c",
        "name": "disconnect",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "action",
                "v": "disconnect",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "4e25b5fa6500606e"
            ]
        ]
    },
    {
        "id": "355fec0a2e1aaf7a",
        "type": "inject",
        "z": "b1ca67b21089b915",
        "g": "c1fd93cd8f38ea7c",
        "name": "connect",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 360,
        "wires": [
            [
                "b82078ca27edc9db"
            ]
        ]
    },
    {
        "id": "b82078ca27edc9db",
        "type": "function",
        "z": "b1ca67b21089b915",
        "g": "c1fd93cd8f38ea7c",
        "name": "Défiition du Broker",
        "func": "msg.action = \"connect\";\nmsg.broker = '{\"broker\":\"' + global.get(\"mqttadresse\")+'\",'\n    + '\"port\":\"' + global.get(\"mqttport\")+'\",'\n    + '\"username\":\"' + global.get(\"mqttuser\")+'\",'\n    + '\"password\":\"' + global.get(\"mqttpass\")+'\"'\n    +'}';\nreturn msg\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 360,
        "wires": [
            [
                "58adbc8abf20aab0"
            ]
        ]
    },
    {
        "id": "58adbc8abf20aab0",
        "type": "json",
        "z": "b1ca67b21089b915",
        "g": "c1fd93cd8f38ea7c",
        "name": "",
        "property": "broker",
        "action": "",
        "pretty": false,
        "x": 530,
        "y": 360,
        "wires": [
            [
                "4e25b5fa6500606e",
                "0c319b0244658cad",
                "468d5c1a95681d8d"
            ]
        ]
    },
    {
        "id": "4e25b5fa6500606e",
        "type": "mqtt out",
        "z": "b1ca67b21089b915",
        "g": "c1fd93cd8f38ea7c",
        "name": "Local MQTT",
        "topic": "",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "94b7314a.817d4",
        "x": 710,
        "y": 300,
        "wires": []
    },
    {
        "id": "0c319b0244658cad",
        "type": "debug",
        "z": "b1ca67b21089b915",
        "g": "c1fd93cd8f38ea7c",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 360,
        "wires": []
    },
    {
        "id": "12543920bca0a8e5",
        "type": "inject",
        "z": "b1ca67b21089b915",
        "g": "c8e26f4ca5e76e36",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "5c144e0e135713c7"
            ]
        ]
    },
    {
        "id": "5c144e0e135713c7",
        "type": "file in",
        "z": "b1ca67b21089b915",
        "g": "c8e26f4ca5e76e36",
        "name": "",
        "filename": "/data/options.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 370,
        "y": 140,
        "wires": [
            [
                "9db46980e482d881"
            ]
        ]
    },
    {
        "id": "9db46980e482d881",
        "type": "json",
        "z": "b1ca67b21089b915",
        "g": "c8e26f4ca5e76e36",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 530,
        "y": 140,
        "wires": [
            [
                "b122ec506872171a",
                "416789eaf381cb09"
            ]
        ]
    },
    {
        "id": "2682276da62a0840",
        "type": "debug",
        "z": "b1ca67b21089b915",
        "g": "c8e26f4ca5e76e36",
        "name": "debug 97",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 180,
        "wires": []
    },
    {
        "id": "0ec51b6fd8d48038",
        "type": "inject",
        "z": "b1ca67b21089b915",
        "g": "6c19eb9e84cdf38b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1020,
        "wires": [
            [
                "84db6ed2a0945bdd"
            ]
        ]
    },
    {
        "id": "84db6ed2a0945bdd",
        "type": "change",
        "z": "b1ca67b21089b915",
        "g": "6c19eb9e84cdf38b",
        "name": "GW true ",
        "rules": [
            {
                "t": "set",
                "p": "use_gateway",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "a0a0d9469406c5a8",
        "type": "inject",
        "z": "b1ca67b21089b915",
        "g": "6c19eb9e84cdf38b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1060,
        "wires": [
            [
                "b38da9cc0fe45944"
            ]
        ]
    },
    {
        "id": "b38da9cc0fe45944",
        "type": "change",
        "z": "b1ca67b21089b915",
        "g": "6c19eb9e84cdf38b",
        "name": "GW false ",
        "rules": [
            {
                "t": "set",
                "p": "use_gateway",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "18be8868fd9888b7",
        "type": "inject",
        "z": "b1ca67b21089b915",
        "g": "6c19eb9e84cdf38b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1100,
        "wires": [
            [
                "567fe9a7f3910323"
            ]
        ]
    },
    {
        "id": "567fe9a7f3910323",
        "type": "change",
        "z": "b1ca67b21089b915",
        "g": "6c19eb9e84cdf38b",
        "name": "BMS Broadcasting ? True",
        "rules": [
            {
                "t": "set",
                "p": "bms_broadcasting",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "32d98207bb37887d",
        "type": "inject",
        "z": "b1ca67b21089b915",
        "g": "6c19eb9e84cdf38b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1140,
        "wires": [
            [
                "9d3d9cd9d0aaf884"
            ]
        ]
    },
    {
        "id": "9d3d9cd9d0aaf884",
        "type": "change",
        "z": "b1ca67b21089b915",
        "g": "6c19eb9e84cdf38b",
        "name": "BMS Broadcasting ? False",
        "rules": [
            {
                "t": "set",
                "p": "bms_broadcasting",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "2f1946e570f89af5",
        "type": "file",
        "z": "b1ca67b21089b915",
        "g": "09c8d74836111377",
        "name": "",
        "filename": "/config/temp/broadcast-bms.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 730,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "4b621344460ef394",
        "type": "function",
        "z": "b1ca67b21089b915",
        "g": "09c8d74836111377",
        "name": "debug en hexa",
        "func": "// Vérifie que le payload est un Buffer\nif (Buffer.isBuffer(msg.payload)) {\n    // Convertit chaque octet en hexadécimal sur 2 chiffres\n    msg.payload = msg.payload\n        .toString('hex')                // Convertit tout le buffer en une chaîne hexadécimale continue\n        .match(/.{1,2}/g)               // Coupe la chaîne tous les 2 caractères\n        .join(' ') + '\\n';              // Ajoute un espace entre chaque octet et un retour à la ligne\n} else if (Array.isArray(msg.payload)) {\n    // Si c'est un tableau, on le traite aussi\n    msg.payload = msg.payload\n        .map(x => x.toString(16).padStart(2, '0'))\n        .join(' ') + '\\n';\n} else {\n    // Sinon, on ne fait rien ou on peut lever une erreur\n    msg.payload = 'Payload non reconnu\\n';\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 682.2000122070312,
        "y": 1130.199951171875,
        "wires": [
            [
                "2f1946e570f89af5"
            ]
        ]
    },
    {
        "id": "66ce0bd5261eb149",
        "type": "mqtt out",
        "z": "b1ca67b21089b915",
        "g": "c1fd93cd8f38ea7c",
        "name": "Local MQTT",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "94b7314a.817d4",
        "x": 730,
        "y": 400,
        "wires": []
    },
    {
        "id": "63efeee1a97e3bb9",
        "type": "inject",
        "z": "b1ca67b21089b915",
        "g": "c1fd93cd8f38ea7c",
        "name": "Publie \"Online\"",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 400,
        "wires": [
            [
                "468d5c1a95681d8d"
            ]
        ]
    },
    {
        "id": "323bc1fdf8eb4b0e",
        "type": "delay",
        "z": "b1ca67b21089b915",
        "g": "c1fd93cd8f38ea7c",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 540,
        "y": 400,
        "wires": [
            [
                "66ce0bd5261eb149"
            ]
        ]
    },
    {
        "id": "468d5c1a95681d8d",
        "type": "function",
        "z": "b1ca67b21089b915",
        "g": "c1fd93cd8f38ea7c",
        "name": "Informe \"Online\"",
        "func": "msg.payload = \"Online\";\nmsg.topic = \"JK-BMS-RS485-CAN-module\";\nmsg.action = \"\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 400,
        "wires": [
            [
                "323bc1fdf8eb4b0e"
            ]
        ]
    },
    {
        "id": "ea424593a0b6533a",
        "type": "inject",
        "z": "b1ca67b21089b915",
        "g": "6c19eb9e84cdf38b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1180,
        "wires": [
            [
                "4a6179de378fa7c5"
            ]
        ]
    },
    {
        "id": "4a6179de378fa7c5",
        "type": "change",
        "z": "b1ca67b21089b915",
        "g": "6c19eb9e84cdf38b",
        "name": "communication_debug true ",
        "rules": [
            {
                "t": "set",
                "p": "communication_debug",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "6fa5d0c215b7e641",
        "type": "inject",
        "z": "b1ca67b21089b915",
        "g": "6c19eb9e84cdf38b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1220,
        "wires": [
            [
                "8bcf0e0b17b0565f"
            ]
        ]
    },
    {
        "id": "8bcf0e0b17b0565f",
        "type": "change",
        "z": "b1ca67b21089b915",
        "g": "6c19eb9e84cdf38b",
        "name": "communication_debug false ",
        "rules": [
            {
                "t": "set",
                "p": "communication_debug",
                "pt": "global",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "b122ec506872171a",
        "type": "debug",
        "z": "b1ca67b21089b915",
        "g": "c8e26f4ca5e76e36",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 180,
        "wires": []
    },
    {
        "id": "416789eaf381cb09",
        "type": "function",
        "z": "b1ca67b21089b915",
        "g": "c8e26f4ca5e76e36",
        "name": "traitement des variables",
        "func": "// Récupération des données du payload\nconst data = msg.payload;\n\n// Fonction pour traiter les champs contenant \":\"\nfunction processAddressPortFields(data) {\n    const processedData = {...data}; // Copie de l'objet original\n    \n    // Liste des champs à traiter (ceux qui peuvent contenir adresse:port)\n    const fieldsToProcess = [\n        { field: 'gateway_ip_port', addressField: 'gateway_ip', portField: 'gateway_port' },\n        { field: 'mqttadresse_port', addressField: 'mqttadresse', portField: 'mqttport' },\n        { field: 'cloud_broker_adress_port', addressField: 'cloud_broker_adress', portField: 'cloud_broker_port' }\n    ];\n    \n    fieldsToProcess.forEach(config => {\n        if (processedData[config.field] && typeof processedData[config.field] === 'string') {\n            const value = processedData[config.field];\n            \n            // Vérifier si le champ contient \":\"\n            if (value.includes(':')) {\n                const lastColonIndex = value.lastIndexOf(':'); // Utilise le dernier \":\" pour gérer les IPv6\n                const address = value.substring(0, lastColonIndex);\n                const port = value.substring(lastColonIndex + 1);\n                \n                // Ajouter les champs séparés\n                processedData[config.addressField] = address;\n                processedData[config.portField] = parseInt(port, 10);\n                \n                node.log(`Champ '${config.field}' traité: ${address}:${port}`);\n            }\n            \n            // Supprimer le champ original avec \"_port\" \n            delete processedData[config.field];\n        }\n    });\n    \n    return processedData;\n}\n\n// Extraction et stockage des variables globales\ntry {\n    // Traitement préalable des champs avec \":\"\n    const processedData = processAddressPortFields(data);\n    \n    // Paramètres MQTT\n    if (processedData.mqttadresse) {\n        global.set(\"mqttadresse\", processedData.mqttadresse);\n        node.log(\"Variable globale 'mqttadresse' = \" + processedData.mqttadresse);\n    }\n    \n    if (processedData.mqttport) {\n        global.set(\"mqttport\", processedData.mqttport);\n        node.log(\"Variable globale 'mqttport' = \" + processedData.mqttport);\n    }\n    \n    if (processedData.mqttuser) {\n        global.set(\"mqttuser\", processedData.mqttuser);\n        node.log(\"Variable globale 'mqttuser' = \" + processedData.mqttuser);\n    }\n    \n    if (processedData.mqttpass) {\n        global.set(\"mqttpass\", processedData.mqttpass);\n        node.log(\"Variable globale 'mqttpass' = \" + processedData.mqttpass);\n    }\n\n    // Configuration Cloud Broker\n    if (processedData.cloud_broker !== undefined) {\n        global.set(\"cloud_broker\", processedData.cloud_broker);\n        node.log(\"Variable globale 'cloud_broker' = \" + processedData.cloud_broker);\n    }\n    \n    if (processedData.cloud_broker_adress) {\n        global.set(\"cloud_broker_adress\", processedData.cloud_broker_adress);\n        node.log(\"Variable globale 'cloud_broker_adress' = \" + processedData.cloud_broker_adress);\n    }\n    \n    if (processedData.cloud_broker_port) {\n        global.set(\"cloud_broker_port\", processedData.cloud_broker_port);\n        node.log(\"Variable globale 'cloud_broker_port' = \" + processedData.cloud_broker_port);\n    }\n    \n    if (processedData.cloud_broker_user) {\n        global.set(\"cloud_broker_user\", processedData.cloud_broker_user);\n        node.log(\"Variable globale 'cloud_broker_user' = \" + processedData.cloud_broker_user);\n    }\n    \n    if (processedData.cloud_broker_pass) {\n        global.set(\"cloud_broker_pass\", processedData.cloud_broker_pass);\n        node.log(\"Variable globale 'cloud_broker_pass' = \" + processedData.cloud_broker_pass);\n    }\n    \n    if (processedData.cloud_HA_long_term_access_tokens) {\n        global.set(\"cloud_HA_long_term_access_tokens\", processedData.cloud_HA_long_term_access_tokens);\n        node.log(\"Variable globale 'cloud_HA_long_term_access_tokens' = \" + processedData.cloud_HA_long_term_access_tokens);\n    }\n\n    // Message de confirmation\n    msg.payload = {\n        status: \"success\",\n        message: \"Variables globales créées avec succès\",\n        variables: {\n            mqttadresse: global.get(\"mqttadresse\"),\n            mqttport: global.get(\"mqttport\"),\n            mqttuser: global.get(\"mqttuser\"),\n            mqttpass: global.get(\"mqttpass\"),\n            cloud_broker_adress: global.get(\"cloud_broker_adress\"),\n            cloud_broker_port: global.get(\"cloud_broker_port\"),\n            cloud_broker_user: global.get(\"cloud_broker_user\"),\n            cloud_broker_pass: global.get(\"cloud_broker_pass\"),\n            cloud_HA_long_term_access_tokens: global.get(\"cloud_HA_long_term_access_tokens\")\n        },\n        processedData: processedData // Pour debugging\n    };\n\n} catch (error) {\n    node.error(\"Erreur lors de la création des variables globales: \" + error.message);\n    msg.payload = {\n        status: \"error\",\n        message: error.message\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 140,
        "wires": [
            [
                "2682276da62a0840"
            ]
        ]
    },
    {
        "id": "354c27a1f08ed79c",
        "type": "comment",
        "z": "a1c7ea549b32dfc9",
        "name": "Récupère les entités définies par l'utilisateur via le broker MQTT et les envoies vers le Cloud (ex: HiveMQ)",
        "info": "",
        "x": 380,
        "y": 40,
        "wires": []
    },
    {
        "id": "fc6a7dbdb2978cae",
        "type": "debug",
        "z": "a1c7ea549b32dfc9",
        "g": "c2c511b3522ee8b0",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 180,
        "wires": []
    },
    {
        "id": "f376639c469c1a76",
        "type": "inject",
        "z": "a1c7ea549b32dfc9",
        "g": "c2c511b3522ee8b0",
        "name": "disconnect",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "action",
                "v": "disconnect",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.6",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "e9140fbdd804c122"
            ]
        ]
    },
    {
        "id": "58623a0b92166652",
        "type": "inject",
        "z": "a1c7ea549b32dfc9",
        "g": "c2c511b3522ee8b0",
        "name": "connect",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 180,
        "wires": [
            [
                "8c259c144bc281fb"
            ]
        ]
    },
    {
        "id": "2d4c8697844d115a",
        "type": "inject",
        "z": "a1c7ea549b32dfc9",
        "g": "c2c511b3522ee8b0",
        "name": "Publie \"Online\"",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "e3da12efa423b488"
            ]
        ]
    },
    {
        "id": "d2e51bdcb36885e6",
        "type": "delay",
        "z": "a1c7ea549b32dfc9",
        "g": "c2c511b3522ee8b0",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 760,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "e3da12efa423b488",
        "type": "function",
        "z": "a1c7ea549b32dfc9",
        "g": "c2c511b3522ee8b0",
        "name": "Informe \"Online\"",
        "func": "msg.payload = \"Online\";\nmsg.retain = true;\nmsg.qos = 1;\nmsg.topic = \"JK-BMS-RS485-CAN-module\";\nmsg.action = \"\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 220,
        "wires": [
            [
                "d2e51bdcb36885e6"
            ]
        ]
    },
    {
        "id": "1c0e7e37c721e7c4",
        "type": "inject",
        "z": "a1c7ea549b32dfc9",
        "g": "b3b9f5f06f6d39ed",
        "name": "60's",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 2,
        "topic": "",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "5cf675dc2470231c"
            ]
        ]
    },
    {
        "id": "7fc8c29d22abed44",
        "type": "file in",
        "z": "a1c7ea549b32dfc9",
        "g": "b3b9f5f06f6d39ed",
        "name": "Lire entities_list.json",
        "filename": "/config/configentities_list.json",
        "filenameType": "str",
        "format": "utf8",
        "allProps": false,
        "x": 480,
        "y": 340,
        "wires": [
            [
                "e5c7a98373192fa3"
            ]
        ]
    },
    {
        "id": "e5c7a98373192fa3",
        "type": "json",
        "z": "a1c7ea549b32dfc9",
        "g": "b3b9f5f06f6d39ed",
        "name": "Parse JSON",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 690,
        "y": 340,
        "wires": [
            [
                "c9e8d64a7cea697b"
            ]
        ]
    },
    {
        "id": "c9e8d64a7cea697b",
        "type": "function",
        "z": "a1c7ea549b32dfc9",
        "g": "b3b9f5f06f6d39ed",
        "name": "Sauve dans variable",
        "func": "flow.set(\"Entity_to_topics\", msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "46a372a620414d76",
        "type": "split",
        "z": "a1c7ea549b32dfc9",
        "g": "6d8a2197f9b79fe1",
        "name": "Un msg par entité",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "stream": false,
        "addname": "",
        "x": 670,
        "y": 460,
        "wires": [
            [
                "9cb68cad2f001d89"
            ]
        ]
    },
    {
        "id": "7300a1fc5fc21865",
        "type": "http request",
        "z": "a1c7ea549b32dfc9",
        "g": "6d8a2197f9b79fe1",
        "name": "API HAOS - Get state",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://homeassistant:8123/api/states/{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 160,
        "y": 520,
        "wires": [
            [
                "ba41b00845d7113a"
            ]
        ]
    },
    {
        "id": "ba41b00845d7113a",
        "type": "function",
        "z": "a1c7ea549b32dfc9",
        "g": "6d8a2197f9b79fe1",
        "name": "Préparer MQTT",
        "func": "let entity = msg.payload.entity_id;\n\n// Supprimer le préfixe avant le \".\"\nlet shortName = entity.includes(\".\") ? entity.split(\".\")[1] : entity;\n\nmsg.topic = \"jkbms-addon/\" + shortName;\n\n// Conversion du state\nlet val = msg.payload.state;\nif (!isNaN(val)) {\n    // Si c'est un nombre (ex: \"00287\"), on convertit en Number\n    msg.payload = Number(val);\n} else {\n    // Sinon, on garde tel quel (utile pour \"on\", \"off\", \"unknown\", etc.)\n    msg.payload = val;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 520,
        "wires": [
            [
                "10ed6574b57f545d",
                "b372af83215826ef"
            ]
        ]
    },
    {
        "id": "10ed6574b57f545d",
        "type": "debug",
        "z": "a1c7ea549b32dfc9",
        "g": "6d8a2197f9b79fe1",
        "name": "debug 21",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 560,
        "wires": []
    },
    {
        "id": "d996108243619012",
        "type": "inject",
        "z": "a1c7ea549b32dfc9",
        "g": "6d8a2197f9b79fe1",
        "name": "5s'",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "fae0cf06c8864182"
            ]
        ]
    },
    {
        "id": "24b002ddce3a8bf8",
        "type": "change",
        "z": "a1c7ea549b32dfc9",
        "g": "6d8a2197f9b79fe1",
        "name": "Get entities",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Entity_to_topics",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "token",
                "pt": "msg",
                "to": "cloud_HA_long_term_access_tokens",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 460,
        "wires": [
            [
                "46a372a620414d76"
            ]
        ]
    },
    {
        "id": "9cb68cad2f001d89",
        "type": "function",
        "z": "a1c7ea549b32dfc9",
        "g": "6d8a2197f9b79fe1",
        "name": "Prep. Header HTTP",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = \"Bearer \" + msg.token;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 460,
        "wires": [
            [
                "7300a1fc5fc21865"
            ]
        ]
    },
    {
        "id": "5cf675dc2470231c",
        "type": "switch",
        "z": "a1c7ea549b32dfc9",
        "g": "b3b9f5f06f6d39ed",
        "name": "cloud_broker",
        "property": "cloud_broker",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 340,
        "wires": [
            [
                "7fc8c29d22abed44"
            ],
            []
        ]
    },
    {
        "id": "fae0cf06c8864182",
        "type": "switch",
        "z": "a1c7ea549b32dfc9",
        "g": "6d8a2197f9b79fe1",
        "name": "cloud_broker ?",
        "property": "cloud_broker",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 280,
        "y": 460,
        "wires": [
            [
                "24b002ddce3a8bf8"
            ],
            []
        ]
    },
    {
        "id": "aee2df6b02ea12cb",
        "type": "inject",
        "z": "a1c7ea549b32dfc9",
        "g": "4c6743f249067968",
        "name": "true",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 680,
        "wires": [
            [
                "a3206be9cb219e6f"
            ]
        ]
    },
    {
        "id": "a3206be9cb219e6f",
        "type": "change",
        "z": "a1c7ea549b32dfc9",
        "g": "4c6743f249067968",
        "name": "cloud_broker",
        "rules": [
            {
                "t": "set",
                "p": "cloud_broker",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "922be1c52ff787bb",
        "type": "inject",
        "z": "a1c7ea549b32dfc9",
        "g": "4c6743f249067968",
        "name": "false",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 150,
        "y": 720,
        "wires": [
            [
                "a3206be9cb219e6f"
            ]
        ]
    },
    {
        "id": "8c259c144bc281fb",
        "type": "switch",
        "z": "a1c7ea549b32dfc9",
        "g": "c2c511b3522ee8b0",
        "name": "cloud_broker",
        "property": "cloud_broker",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 180,
        "wires": [
            [
                "f8c85e619c304aa7"
            ],
            []
        ]
    },
    {
        "id": "261a538fbeadf292",
        "type": "inject",
        "z": "a1c7ea549b32dfc9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "test",
        "payloadType": "str",
        "x": 560,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "b5b84c4dc25cb57a",
        "type": "inject",
        "z": "a1c7ea549b32dfc9",
        "name": "connect",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "action",
                "v": "connect",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 540,
        "y": 720,
        "wires": [
            [
                "607b6ef23da30da8"
            ]
        ]
    },
    {
        "id": "673965a2345b199f",
        "type": "inject",
        "z": "a1c7ea549b32dfc9",
        "name": "disconnect",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "action",
                "v": "disconnect",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.6",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 560,
        "y": 760,
        "wires": [
            [
                "607b6ef23da30da8"
            ]
        ]
    },
    {
        "id": "47e186f2aaa312de",
        "type": "change",
        "z": "a1c7ea549b32dfc9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "connect",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.broker",
                "pt": "msg",
                "to": "bca204074b3740d684ea0a81bae5b858.s1.eu.hivemq.cloud",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.port",
                "pt": "msg",
                "to": "8883",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "broker.username",
                "pt": "msg",
                "to": "JKBMS-user",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.password",
                "pt": "msg",
                "to": "JKBMS-user2025",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 800,
        "wires": [
            [
                "b983cc7fa5816269",
                "607b6ef23da30da8"
            ]
        ]
    },
    {
        "id": "133563f26b6efdf1",
        "type": "inject",
        "z": "a1c7ea549b32dfc9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 560,
        "y": 800,
        "wires": [
            [
                "47e186f2aaa312de"
            ]
        ]
    },
    {
        "id": "b983cc7fa5816269",
        "type": "debug",
        "z": "a1c7ea549b32dfc9",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 780,
        "wires": []
    },
    {
        "id": "d386b48ee50d7d13",
        "type": "function",
        "z": "a1c7ea549b32dfc9",
        "name": "function 2",
        "func": "// Affichage des valeurs avec leur taille\nnode.log(\"Username: '\" + msg.broker.username + \"' (length: \" + msg.broker.username.length + \")\");\nnode.log(\"Password: '\" + msg.broker.password + \"' (length: \" + msg.broker.password.length + \")\");\n\n// Affichage caractère par caractère pour voir les caractères invisibles\nnode.log(\"Username chars: \" + JSON.stringify(msg.broker.username.split('')));\nnode.log(\"Password chars: \" + JSON.stringify(msg.broker.password.split('')));\n\n// Retourner le message sans modification\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 860,
        "wires": [
            [
                "2410c277457f1f76"
            ]
        ]
    },
    {
        "id": "2410c277457f1f76",
        "type": "debug",
        "z": "a1c7ea549b32dfc9",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 940,
        "wires": []
    },
    {
        "id": "607b6ef23da30da8",
        "type": "mqtt out",
        "z": "a1c7ea549b32dfc9",
        "name": "Cloud MQTT Broker",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79bd9f312e074d8e",
        "x": 780,
        "y": 720,
        "wires": []
    },
    {
        "id": "f8c85e619c304aa7",
        "type": "change",
        "z": "a1c7ea549b32dfc9",
        "g": "c2c511b3522ee8b0",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "connect",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.broker",
                "pt": "msg",
                "to": "bca204074b3740d684ea0a81bae5b858.s1.eu.hivemq.cloud",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.port",
                "pt": "msg",
                "to": "8883",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "broker.username",
                "pt": "msg",
                "to": "JKBMS-user",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.password",
                "pt": "msg",
                "to": "JKBMS-user2025",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 180,
        "wires": [
            [
                "e9140fbdd804c122",
                "fc6a7dbdb2978cae"
            ]
        ]
    },
    {
        "id": "e9140fbdd804c122",
        "type": "mqtt out",
        "z": "a1c7ea549b32dfc9",
        "g": "c2c511b3522ee8b0",
        "name": "Cloud MQTT Broker",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79bd9f312e074d8e",
        "x": 720,
        "y": 140,
        "wires": []
    },
    {
        "id": "ce539e2ec9dc2a3b",
        "type": "change",
        "z": "a1c7ea549b32dfc9",
        "name": "Prep. Broker Input",
        "rules": [
            {
                "t": "set",
                "p": "action",
                "pt": "msg",
                "to": "connect",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "broker.broker",
                "pt": "msg",
                "to": "cloud_broker_adress",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "broker.port",
                "pt": "msg",
                "to": "cloud_broker_port",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "broker.username",
                "pt": "msg",
                "to": "cloud_broker_user",
                "tot": "global"
            },
            {
                "t": "set",
                "p": "broker.password",
                "pt": "msg",
                "to": "cloud_broker_pass",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "b372af83215826ef",
        "type": "mqtt out",
        "z": "a1c7ea549b32dfc9",
        "g": "6d8a2197f9b79fe1",
        "name": "Cloud MQTT Broker",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79bd9f312e074d8e",
        "x": 600,
        "y": 520,
        "wires": []
    },
    {
        "id": "3e17af36f9437b17",
        "type": "mqtt in",
        "z": "cae51940ae4cfae7",
        "name": "Cloud MQTT IN",
        "topic": "device/#",
        "qos": "0",
        "datatype": "auto",
        "broker": "0f46412e148c8e44",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 180,
        "wires": [
            [
                "96c1c9a46dd9623e",
                "a1f84e21acec3079"
            ]
        ]
    },
    {
        "id": "96c1c9a46dd9623e",
        "type": "function",
        "z": "cae51940ae4cfae7",
        "name": "Mapper Discovery/State",
        "func": "// Découper le topic\nvar parts = msg.topic.split(\"/\");\nif (parts.length < 4) return null;\n\nvar device = parts[1];   // ex: esp32-onduleur\nvar entity = parts[2];   // ex: tension\nvar type   = parts[3];   // config | state\n\nif (type === \"config\") {\n    var cfg = {};\n    try {\n        cfg = JSON.parse(msg.payload);\n    } catch(e) {\n        node.error(\"Payload config non JSON valide : \" + msg.payload);\n        return null;\n    }\n\n    var discovery_topic = \"homeassistant/\" + cfg.component + \"/\" + device + \"/\" + entity + \"/config\";\n\n    cfg = Object.assign(cfg, {\n        state_topic: \"device/\" + device + \"/\" + entity + \"/state\",\n        command_topic: \"device/\" + device + \"/\" + entity + \"/set\",\n        unique_id: device + \"_\" + entity,\n        device: { identifiers: [device], name: device }\n    });\n\n    return { topic: discovery_topic, payload: JSON.stringify(cfg), retain: true };\n}\n\nif (type === \"state\") {\n    return { topic: \"device/\" + device + \"/\" + entity + \"/state\", payload: msg.payload, retain: false };\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 180,
        "wires": [
            [
                "9d14c08ce76587a6",
                "7f9fde987a42e6ec"
            ]
        ]
    },
    {
        "id": "9d14c08ce76587a6",
        "type": "mqtt out",
        "z": "cae51940ae4cfae7",
        "name": "Local MQTT out",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "94b7314a.817d4",
        "x": 700,
        "y": 180,
        "wires": []
    },
    {
        "id": "a1f84e21acec3079",
        "type": "debug",
        "z": "cae51940ae4cfae7",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 190,
        "y": 240,
        "wires": []
    },
    {
        "id": "7f9fde987a42e6ec",
        "type": "debug",
        "z": "cae51940ae4cfae7",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 240,
        "wires": []
    },
    {
        "id": "1cd5906d31d95ec9",
        "type": "comment",
        "z": "cae51940ae4cfae7",
        "name": "Récupérer les topics provenants d'un broker cloud et envoi vers broker interne",
        "info": "Les Topics doivent commencer par **device/#**",
        "x": 350,
        "y": 60,
        "wires": []
    }
]